services:
  backend:
    container_name: "${PROJECT_NAME:-backend}"
    build:
      context: ./backend
      dockerfile: backend/Dockerfile.dev
    restart: "no"
    environment:
      USER_ID: "${USER_ID:?}"
      GROUP_ID: "${GROUP_ID:?}"
      SERVER_PORT: "${SERVER_PORT:-80}"
      SERVER_PORT_SSL: "${SERVER_PORT_SSL:-443}"
    depends_on:
      - postgres
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run start:dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.localhost`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"

  frontend:
    build:
      context: ./frontend
      dockerfile: frontend/Dockerfile.dev
    container_name: "${PROJECT_NAME:-frontend}"
    volumes:
      - ./frontend:/src
      - /frontend/node_modules
    command: npm run dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.localhost`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"

  postgres:
    image: postgres:17.5
    container_name: "${PROJECT_NAME:-postgres}"
    restart: "no"
    ports:
      - '5432:5432'
    env_file:
      - .env
    volumes:
      - postgres:/var/lib/postgresql/data

  traefik:
    image: traefik:v3.5
    container_name: "${PROJECT_NAME:-traefik}"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certificates.certFile=/certs/cert.pem"
      - "--entrypoints.websecure.http.tls.certificates.keyFile=/certs/key.pem"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Dashboard do Traefik
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./certs:/certs:ro"